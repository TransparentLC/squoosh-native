name: build

on:
  push:
    branches:
      - master

jobs:
  download-cli:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
    steps:
      - name: Download CLI tools for Windows
        run: |
          mkdir -p codec

          v=$(curl --silent --compressed https://api.github.com/repos/garyzyg/mozjpeg-windows/tags | jq -r ".[0].name")
          wget "https://github.com/garyzyg/mozjpeg-windows/releases/download/${v}/mozjpeg-x64.zip"
          unzip "mozjpeg-x64.zip"
          cp cjpeg-static.exe codec/cjpeg.exe

          v=$(curl --silent --compressed https://api.github.com/repos/AOMediaCodec/libavif/tags | jq -r ".[0].name")
          wget "https://github.com/AOMediaCodec/libavif/releases/download/${v}/libavif-${v}-avifenc-avifdec-windows.zip"
          unzip "libavif-${v}-avifenc-avifdec-windows.zip"
          cp avifenc.exe codec/avifenc.exe

          wget https://artifacts.lucaversari.it/libjxl/libjxl/latest/jxl-x64-windows-static.zip
          unzip jxl-x64-windows-static.zip
          cp bin/cjxl.exe codec/cjxl.exe
          cp bin/cjpegli.exe codec/cjpegli.exe
          cp bin/ssimulacra2.exe codec/ssimulacra2.exe
          cp bin/butteraugli_main.exe codec/butteraugli.exe

          v=$(curl --silent --compressed https://api.github.com/repos/webmproject/libwebp/tags | jq -r ".[0].name[1:]")
          wget "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${v}-windows-x64.zip"
          unzip "libwebp-${v}-windows-x64.zip"
          cp "libwebp-${v}-windows-x64/bin/cwebp.exe" codec/cwebp.exe

          v=$(curl --silent --compressed https://api.github.com/repos/kornelski/dssim/tags | jq -r ".[0].name")
          wget "https://github.com/kornelski/dssim/releases/download/${v}/dssim-${v}.zip"
          unzip "dssim-${v}.zip"
          cp win/dssim.exe codec/dssim.exe
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: tools-Windows
          path: bin
          compression-level: 9
  build-squoosh:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
          architecture: x64
          check-latest: true
          cache: pnpm
          cache-dependency-path: squoosh/pnpm-lock.yaml
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          check-latest: true
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Build squoosh
        run: |
          cd squoosh
          pnpm install
          pnpm run build
          cd ..
          python bundle_squoosh.py
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: squoosh
          path: squoosh.pak
  build:
    needs: build-squoosh
    runs-on: ${{ matrix.os }}
    env:
      PYTHONIOENCODING: utf-8
      PYTHONOPTIMIZE: 1
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os:
          - windows-latest
          # - ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          check-latest: true
          cache: pip
          cache-dependency-path: requirements.txt
      - name: Install pip dependencies
        run: pip install -U -r requirements.txt
      - name: Download prebuilt squoosh assets
        uses: actions/download-artifact@v4
        with:
          name: squoosh
      - name: Build
        run: |
          if [ $RUNNER_OS == "Windows" ]; then
            choco install upx --no-progress
            gcc -Wall -Ofast -march=native -mtune=native -shared -o libsvpng.dll svpng.c
            strip libsvpng.dll
          elif [ $RUNNER_OS == "Linux" ]; then
            gcc -Wall -Ofast -march=native -mtune=native -shared -o libsvpng.so svpng.c
            strip libsvpng.so
          fi
          pip install -U pyinstaller
          pyinstaller --noconfirm --log-level WARN main.spec
          mkdir -p dist/squoosh-native/bin
          cp bin/README.txt dist/squoosh-native/bin/README.txt
      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: squoosh-native-${{ runner.os }}
          path: dist
          compression-level: 9
